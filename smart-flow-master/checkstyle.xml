<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!-- 可以通过 //cs:off  //cs:on 包围来绕过校验 -->
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="cs:off"/>
        <property name="onCommentFormat" value="cs:on"/>
    </module>
    <module name="TreeWalker">
        <!-- 配合上面SuppressionCommentFilter使用的，必须配置 -->
        <module name="FileContentsHolder"/>

        <!-- try最多被嵌套2层 -->
        <module name="NestedTryDepth">
            <property name="max" value="2" />
        </module>

        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport"/>
        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport"/>
        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports"/>
        <!--  Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification,  Section 3.10.1.
              检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。
              looks a lot like 1. -->
        <module name="UpperEll"/>

        <!--检查字符串是否有用= =或!=进行操作-->
        <module name="StringLiteralEquality">
            <property name="severity" value="error"/>
        </module>

        <!--检查是否抛出了未声明的异常。-->
        <module name="IllegalThrows">
            <property name="severity" value="warning"/>
        </module>

        <!--检查匿名内部类的长度。默认为20。-->
        <module name="AnonInnerLength">
            <property name="severity" value="warning"/>
        </module>

        <!--Default 放在 switch 语句的最后.-->
        <module name="DefaultComesLast">
            <property name="severity" value="warning"/>
        </module>

        <!--检查类是否覆盖了equals()和hashCode()。-->
        <module name="EqualsHashCode">
            <property name="severity" value="error"/>
        </module>
        <!-- 重载父类方法 -->
        <module name="MissingOverride">
            <property name="severity" value="error"/>
            <message key="annotation.missing.override" value="重载方法缺少@Override，违反编码规范5.5章节" />
            <message key="tag.not.valid.on" value="注释-> Javadoc {0}标签在这个位置是无效的." />
        </module>

        <!--检查包名-->
        <module name="PackageName">
            <property name="severity" value="error"/>
            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>

        <!--没用的import检查-->
        <module name="UnusedImports">
            <property name="severity" value="error"/>
            <property name="processJavadoc" value="false"/>
        </module>

        <!--检查空的代码段-->
        <module name="EmptyStatement">
            <property name="severity" value="error"/>
        </module>

        <!--一条 import或者package语句 不能进行换行-->
        <module name="NoLineWrap"/>

        <!-- 检查数组类型的定义是String[] args，而不是String args[] -->
        <module name="ArrayTypeStyle" />

        <!--if else 的循环嵌套-->
        <module name="NestedIfDepth">
            <property name="severity" value="warning"/>
            <property name="max" value="3"/>
        </module>

        <!-- 局部变量必须符合规范-->
        <module name="LocalVariableName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <!--不包含注释的源码行数限制-->
        <module name="JavaNCSS">
            <property name="severity" value="warning"/>
            <property name="methodMaximum" value="80"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="2000"/>
        </module>

        <!--检查接口和annotation中是否有重复的修饰符-->
        <module name="RedundantModifier">
            <property name="severity" value="error"/>
        </module>

        <!--检查方法参数-->
        <module name="MethodTypeParameterName">
            <property name="severity" value="error"/>
            <property name="format" value="^[A-Z]$"/>
        </module>
        <!-- 每行语句数量-->
        <module name="OneStatementPerLine">
            <property name="severity" value="error"/>
        </module>

        <!--检查局部的final类型变量名，包括catch的参数-->
        <module name="LocalFinalVariableName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!--检查类的参数名-->
        <module name="ClassTypeParameterName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[A-Z]$"/>
        </module>
        <!--检查是否有过度复杂的布尔表达式。-->
        <module name="SimplifyBooleanExpression">
            <property name="severity" value="warning"/>
        </module>

        <!-- 布尔表达式的复杂度，不超过5 -->
        <module name="BooleanExpressionComplexity">
            <property name="severity" value="error"/>
            <property name="max" value="5"/>
        </module>

        <!-- 禁止使用System.out.println -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.out\.println" />
            <property name="ignoreComments" value="true" />
            <property name="message" value="代码中禁用System.out.println"/>
        </module>

        <!-- 禁止使用System.error.println -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.error\.println" />
            <property name="ignoreComments" value="true" />
            <property name="message" value="代码中禁用System.error.println"/>
        </module>

        <!-- 禁止使用Arrays.subList -->
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="Arrays\.subList" />
            <property name="ignoreComments" value="true" />
            <property name="message" value="代码中禁用Arrays.subList"/>
        </module>
    </module>
</module>